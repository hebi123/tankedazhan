

# 坦克大战游戏 - 代码类与函数清单

## Python 后端代码

### web/app.py - Flask 主应用
```python
# 类/函数定义
def create_app() -> Flask:
    """Flask 应用工厂函数"""
    # 创建 Flask 实例
    # 配置 JSON 中文输出
    # 注册 CORS 和 API 蓝图
    # 定义路由

@app.route("/")
def index():
    """首页路由 - 返回 index.html 模板"""

@app.route("/game") 
def game():
    """游戏页面路由 - 返回 game.html 模板"""

@app.route("/levels")
def levels():
    """关卡列表页面路由 - 返回 levels.html 模板"""

@app.route("/health")
def health():
    """健康检查路由 - 返回状态 JSON"""

# 主程序入口
if __name__ == "__main__":
    # 从环境变量读取配置
    # 创建并运行应用
```

### web/api.py - API 蓝图
```python
# 蓝图定义
api = Blueprint("api", __name__, url_prefix="/api")

@api.get("/levels")
def list_levels():
    """获取关卡列表 API"""
    # 返回硬编码的关卡数据
    # 格式: [{"id": 1, "name": "训练关", "enemies": 10}, ...]

@api.post("/progress")
def save_progress():
    """保存游戏进度 API"""
    # 接收 JSON 数据
    # 返回确认信息（占位实现）

@api.get("/level/<int:level_id>")
def get_level(level_id: int):
    """获取指定关卡数据 API"""
    # 程序化生成 26x26 地图
    # 设置外围钢板边界
    # 分布砖块和草地
    # 在基地周围添加防护钢板
    # 返回完整关卡数据
```

## JavaScript 前端代码

### web/templates/game.html - 游戏核心逻辑
```javascript
// 全局变量定义
const canvas = document.getElementById('game');
const ctx = canvas.getContext('2d');
const keysSpan = document.getElementById('keys');
const fpsSpan = document.getElementById('fps');

let W = canvas.width, H = canvas.height;
const tank = { x: W/2, y: H/2, w: 18, h: 18, speed: 100, dir:'up', fireCooldown: 0.0 };
let level = null;
const bullets = [];
let levelOffsetX = 0, levelOffsetY = 0;
const input = { up:false, down:false, left:false, right:false };

// 时间步进变量
let last = performance.now();
let acc = 0; 
const FIXED_DT = 1/60;
let fpsTimer = 0; 
let frames = 0;

// 核心函数
function drawTank() {
    """绘制玩家坦克"""
    // 设置蓝色填充
    // 绘制矩形（居中）
}

function update(dt) {
    """游戏逻辑更新"""
    // 计算移动增量
    // 分轴碰撞检测移动
    // 更新坦克方向
    // 更新射击冷却
    // 更新所有子弹位置
    // 处理子弹碰撞和边界
}

function render() {
    """渲染游戏画面"""
    // 清空画布
    // 绘制背景网格
    // 渲染瓦片地图（如果有关卡数据）
    // 渲染所有子弹
    // 绘制玩家坦克
}

function loop(now) {
    """主游戏循环"""
    // 计算时间差
    // 固定时间步更新
    // 渲染画面
    // 更新 FPS 显示
    // 请求下一帧
}

function setKey(e, down) {
    """键盘事件处理"""
    // 解析按键（WASD/方向键）
    // 更新输入状态
    // 显示当前按键
    // 处理射击按键（J/空格）
}

async function loadLevel(id) {
    """加载关卡数据"""
    // 请求关卡 API
    // 解析 JSON 数据
    // 设置画布尺寸
    // 计算地图偏移
    // 设置玩家出生点
}

function fire() {
    """发射子弹"""
    // 检查冷却时间
    // 根据坦克方向计算速度
    // 创建子弹对象
    // 添加到子弹数组
}

function checkBulletCollision(b) {
    """检查子弹碰撞"""
    // 转换到地图坐标
    // 检查边界
    // 检查瓦片类型
    // 处理砖块破坏（玩家1发，敌人3发）
    // 处理钢板/水面阻挡
}

function checkBulletCollision() {
    """检查子弹对撞"""
    // 遍历所有子弹对
    // 检查不同主人的子弹碰撞
    // 同时移除碰撞的子弹
}

function isSolidTile(t) {
    """判断瓦片是否阻挡"""
    // 检查砖块、钢板、水面
}

function willCollide(nextX, nextY) {
    """预测碰撞检测"""
    // 计算坦克包围盒
    // 限制在地图范围内
    // 遍历可能碰撞的瓦片
    // 检查固体瓦片
}

// 事件监听器
addEventListener('keydown', e=>setKey(e,true));
addEventListener('keyup', e=>setKey(e,false));

// 初始化
loadLevel(1).then(()=>requestAnimationFrame(loop));
```

### web/templates/levels.html - 关卡列表页面
```javascript
// 页面加载函数
async function load() {
    """加载关卡列表"""
    // 请求 /api/levels
    // 解析 JSON 数据
    // 动态生成表格行
    // 添加操作按钮
}

// 页面初始化
load();
```

## HTML 模板结构

### web/templates/index.html
```html
<!-- 页面结构 -->
<!doctype html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>坦克大战 · 前端</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}" />
</head>
<body>
    <main class="container">
        <h1>坦克大战 · Flask 前端</h1>
        <p>如果你能看到这个页面，说明 Flask 已经运行成功。</p>
        <p>健康检查：<code>/health</code></p>
        <p>
            <!-- 导航按钮组 -->
            <a class="btn" href="{{ url_for('game') }}">进入游戏画布演示</a>
            <a class="btn" href="/api/levels" target="_blank">查看关卡列表(JSON)</a>
            <a class="btn" href="{{ url_for('levels') }}">关卡列表页面</a>
        </p>
    </main>
</body>
</html>
```

### web/templates/game.html
```html
<!-- 游戏页面结构 -->
<!doctype html>
<html lang="zh-CN">
<head>
    <!-- 样式定义 -->
    <style>
        .game-wrap{display:flex;gap:16px;align-items:flex-start}
        canvas{image-rendering:pixelated;background:#111;border:1px solid #334155}
        .panel{min-width:220px}
        .panel h2{font-size:18px;margin:0 0 8px}
        .kv{display:flex;justify-content:space-between;margin:4px 0}
        .muted{opacity:.8;font-size:14px}
        .btn{display:inline-block;padding:6px 12px;border:1px solid #334155;border-radius:6px;color:#e2e8f0;text-decoration:none}
        .btn:hover{background:#1e293b}
    </style>
</head>
<body>
    <main class="container">
        <h1>坦克大战 · 画布演示</h1>
        <div class="game-wrap">
            <canvas id="game" width="480" height="270"></canvas>
            <aside class="panel">
                <h2>状态</h2>
                <div class="kv"><span>FPS</span><span id="fps">-</span></div>
                <div class="kv"><span>按键</span><span class="muted" id="keys">-</span></div>
                <p><a class="btn" href="{{ url_for('index') }}">返回首页</a></p>
            </aside>
        </div>
    </main>
    <!-- JavaScript 游戏逻辑 -->
    <script>
        // ... 所有游戏函数定义 ...
    </script>
</body>
</html>
```

### web/templates/levels.html
```html
<!-- 关卡列表页面结构 -->
<!doctype html>
<html lang="zh-CN">
<head>
    <!-- 样式定义 -->
    <style>
        table{width:100%;border-collapse:collapse}
        th,td{border:1px solid #334155;padding:8px;text-align:left}
        th{background:#0b1220;color:#93c5fd}
        tr:nth-child(even){background:#0b1420}
    </style>
</head>
<body>
    <main class="container">
        <h1>关卡列表</h1>
        <p class="muted">数据来自 <code>/api/levels</code></p>
        <table id="tbl">
            <thead><tr><th>ID</th><th>名称</th><th>敌人数</th><th>操作</th></tr></thead>
            <tbody></tbody>
        </table>
        <p style="margin-top:12px"><a class="btn" href="{{ url_for('index') }}">返回首页</a></p>
    </main>
    <!-- JavaScript 数据加载 -->
    <script>
        // ... 关卡列表加载函数 ...
    </script>
</body>
</html>
```

## CSS 样式类

### web/static/styles.css
```css
/* 全局样式 */
:root{--bg:#0f172a;--fg:#e2e8f0;--accent:#38bdf8}
*{box-sizing:border-box}
html,body{height:100%}
body{margin:0;background:var(--bg);color:var(--fg);font:16px/1.6 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif}
.container{max-width:900px;margin:0 auto;padding:48px 24px}
h1{font-size:28px;margin:0 0 16px;color:var(--accent)}
p{margin:8px 0}
```

## 数据对象结构

### 关卡数据对象 (Level)
```javascript
{
    "id": 1,                    // 关卡 ID
    "size": [26, 26],           // 地图尺寸 [宽, 高]
    "tile_size": 16,            // 瓦片像素大小
    "tiles": [                  // 二维瓦片数组
        ["ground", "brick", ...],
        ["steel", "grass", ...],
        ...
    ],
    "player_spawn": [2, 23],    // 玩家出生点 [x, y]
    "enemy_spawns": [           // 敌人生成点列表
        [23, 2], [23, 23], [2, 2]
    ],
    "base": [13, 24]            // 基地位置 [x, y]
}
```

### 玩家坦克对象 (Tank)
```javascript
{
    x: 100,                     // X 坐标
    y: 100,                     // Y 坐标
    w: 18,                      // 宽度
    h: 18,                      // 高度
    speed: 100,                 // 移动速度
    dir: 'up',                  // 朝向: 'up'|'down'|'left'|'right'
    fireCooldown: 0.0           // 射击冷却时间
}
```

### 子弹对象 (Bullet)
```javascript
{
    x: 100,                     // X 坐标
    y: 100,                     // Y 坐标
    vx: 0,                      // X 方向速度
    vy: -260                    // Y 方向速度
}
```

### 输入状态对象 (Input)
```javascript
{
    up: false,                  // 上方向键状态
    down: false,                // 下方向键状态
    left: false,                // 左方向键状态
    right: false                // 右方向键状态
}
```

## 瓦片类型枚举
```javascript
const TILE_TYPES = {
    'brick': '#b45309',         // 砖块 - 可被子弹破坏
    'steel': '#94a3b8',         // 钢板 - 阻挡坦克和子弹
    'grass': '#14532d',         // 草地 - 阻挡坦克，子弹可穿透
    'water': '#0369a1',         // 水面 - 阻挡坦克和子弹
    'ice': '#93c5fd',           // 冰面 - 减速效果（未实现）
    'ground': '#0b1220'         // 地面 - 可通行
};
```

## 常量定义
```javascript
// 游戏常量
const FIXED_DT = 1/60;          // 固定时间步 (60 FPS)
const TANK_SPEED = 100;         // 坦克移动速度
const BULLET_SPEED = 260;       // 子弹飞行速度
const FIRE_COOLDOWN = 0.25;     // 射击冷却时间 (秒)
const CANVAS_WIDTH = 640;       // 画布宽度
const CANVAS_HEIGHT = 360;      // 画布高度
const TILE_SIZE = 16;           // 瓦片像素大小
const MAP_WIDTH = 26;           // 地图宽度（瓦片数）
const MAP_HEIGHT = 26;          // 地图高度（瓦片数）
```

## 文件修改记录
- 2025-09-10: 创建基础 Flask 应用和模板
- 2025-09-10: 实现游戏画布和基础移动
- 2025-09-10: 添加子弹系统和碰撞检测
- 2025-09-10: 完善瓦片地图渲染和阻挡系统
- 2025-09-10: 实现敌人生成系统（4种类型）和基础 AI
- 2025-09-10: 实现基地系统和游戏胜负条件
- 2025-09-10: 实现 HUD 显示和得分系统
- 2025-09-10: 实现主菜单系统和设置页面
- 2025-09-10: 添加暂停菜单和游戏帮助页面
- 2025-09-10: 创建代码类与函数清单文档
