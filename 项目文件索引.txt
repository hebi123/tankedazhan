# 坦克大战游戏项目文件索引

## 项目根目录
```
D:\laohedidaima\2025-9-10 - 坦克大战游戏\
├── readme.md.txt                    # 项目需求文档
├── requirements.txt                 # Python 依赖列表
├── 项目文件索引.txt                 # 本文件
└── .venv\                          # Python 虚拟环境
```

## 后端 Flask 应用
```
web\
├── app.py                          # Flask 主应用入口
│   ├── create_app()                # 应用工厂函数
│   ├── @app.route("/")             # 首页路由
│   ├── @app.route("/game")         # 游戏页面路由
│   ├── @app.route("/levels")       # 关卡列表页面路由
│   └── @app.route("/health")       # 健康检查路由
├── api.py                          # API 蓝图
│   ├── @api.get("/levels")         # 获取关卡列表
│   ├── @api.post("/progress")      # 保存进度
│   └── @api.get("/level/<id>")     # 获取关卡数据
└── __init__.py                     # 包初始化文件（如存在）
```

## 前端模板文件
```
web\templates\
├── index.html                      # 首页模板
│   ├── 标题与说明文字
│   ├── "进入游戏画布演示" 按钮
│   ├── "查看关卡列表(JSON)" 按钮
│   └── "关卡列表页面" 按钮
├── game.html                       # 游戏页面模板
│   ├── Canvas 画布 (640x360)
│   ├── 游戏状态面板 (FPS、按键显示)
│   ├── 坦克移动逻辑 (WASD/方向键)
│   ├── 子弹发射系统 (J/空格键)
│   ├── 瓦片碰撞检测
│   ├── 关卡数据加载
│   └── 实时渲染循环
└── levels.html                     # 关卡列表页面模板
    ├── 表格展示关卡数据
    ├── 动态加载 /api/levels
    └── "开始" 按钮链接到游戏
```

## 静态资源文件
```
web\static\
└── styles.css                      # 全局样式表
    ├── 深色主题配色
    ├── 响应式布局
    ├── 按钮样式
    └── 游戏页面专用样式
```

## 数据与配置
```
web\data\                          # 数据目录（计划中）
├── levels\                        # 关卡文件目录
└── config.json                    # 配置文件
```

## 核心功能模块

### 1. 地图系统
- **瓦片类型**：brick(砖块)、steel(钢板)、grass(草地)、water(水面)、ice(冰面)、ground(地面)
- **地图尺寸**：26x26 网格，每格 16px
- **碰撞规则**：砖块/钢板/水面阻挡坦克，砖块可被子弹破坏

### 2. 游戏实体
- **玩家坦克**：蓝色方块，WASD 移动，J/空格射击
- **子弹系统**：橙色小方块，按坦克朝向飞行，冷却时间 0.25 秒
- **碰撞检测**：AABB 检测，分轴移动避免卡墙

### 3. API 接口
- **GET /api/levels**：返回关卡列表 JSON
- **GET /api/level/1**：返回关卡 1 的完整数据
- **POST /api/progress**：接收并回显进度数据

### 4. 前端交互
- **键盘输入**：WASD/方向键移动，J/空格射击
- **实时显示**：FPS 计数器，当前按键状态
- **画布渲染**：固定 640x360 画布，地图居中显示

## 运行命令

### 开发环境
```powershell
# 创建虚拟环境
py -3 -m venv .venv

# 激活虚拟环境
.\.venv\Scripts\Activate.ps1

# 安装依赖
pip install -r requirements.txt

# 启动开发服务器
python -m web.app
```

### 访问地址
- 首页：http://127.0.0.1:5000/
- 游戏：http://127.0.0.1:5000/game
- 关卡列表：http://127.0.0.1:5000/levels
- API 健康检查：http://127.0.0.1:5000/health

## 依赖包
```
Flask>=3.0.0,<4          # Web 框架
Flask-Cors>=4.0.0,<5     # 跨域支持
python-dotenv>=1.0.1,<2  # 环境变量
waitress>=2.1.2,<3       # 生产 WSGI 服务器
```

## 已实现功能
- [x] 基础 Flask 应用与 API
- [x] 游戏画布与玩家移动
- [x] 瓦片地图渲染与碰撞
- [x] 子弹系统与碰撞检测（包括子弹对撞、砖块耐久度）
- [x] 敌人生成系统（4种类型）
- [x] 敌人 AI 与射击
- [x] 基地系统与胜负条件（含防护钢板）
- [x] HUD 显示与得分系统
- [x] 主菜单系统（开始游戏、关卡选择、设置、帮助、关于）
- [x] 设置页面（音量、按键映射、分辨率、难度）
- [x] 暂停菜单（ESC 暂停/继续，R 重新开始）
- [x] 游戏帮助页面（操作指南、敌人介绍、游戏规则）

## 待实现功能
- [ ] 道具系统（星星、头盔、锹、炸弹、坦克、枪）
- [ ] 存档与配置持久化
- [ ] 音效与音乐
- [ ] 爆炸特效与视觉反馈

## 文件修改历史
- 2025-09-10：创建项目骨架与 Flask 应用
- 2025-09-10：实现游戏画布与基础移动
- 2025-09-10：添加子弹系统与碰撞检测
- 2025-09-10：完善瓦片地图渲染与阻挡
